// Code generated by ent, DO NOT EDIT.

package incident

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DeltaLaboratory/incident-api/internal/ent/predicate"
	"github.com/DeltaLaboratory/incident-api/internal/ent/schema"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldID, id))
}

// IdempotencyKey applies equality check predicate on the "idempotency_key" field. It's identical to IdempotencyKeyEQ.
func IdempotencyKey(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldIdempotencyKey, v))
}

// Reporter applies equality check predicate on the "reporter" field. It's identical to ReporterEQ.
func Reporter(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldReporter, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldEQ(FieldLatitude, vc))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldEQ(FieldLongitude, vc))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldType, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldDescription, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v []byte) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldImage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldCreatedAt, v))
}

// IdempotencyKeyEQ applies the EQ predicate on the "idempotency_key" field.
func IdempotencyKeyEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldIdempotencyKey, v))
}

// IdempotencyKeyNEQ applies the NEQ predicate on the "idempotency_key" field.
func IdempotencyKeyNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldIdempotencyKey, v))
}

// IdempotencyKeyIn applies the In predicate on the "idempotency_key" field.
func IdempotencyKeyIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldIdempotencyKey, vs...))
}

// IdempotencyKeyNotIn applies the NotIn predicate on the "idempotency_key" field.
func IdempotencyKeyNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldIdempotencyKey, vs...))
}

// IdempotencyKeyGT applies the GT predicate on the "idempotency_key" field.
func IdempotencyKeyGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldIdempotencyKey, v))
}

// IdempotencyKeyGTE applies the GTE predicate on the "idempotency_key" field.
func IdempotencyKeyGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldIdempotencyKey, v))
}

// IdempotencyKeyLT applies the LT predicate on the "idempotency_key" field.
func IdempotencyKeyLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldIdempotencyKey, v))
}

// IdempotencyKeyLTE applies the LTE predicate on the "idempotency_key" field.
func IdempotencyKeyLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldIdempotencyKey, v))
}

// IdempotencyKeyContains applies the Contains predicate on the "idempotency_key" field.
func IdempotencyKeyContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldIdempotencyKey, v))
}

// IdempotencyKeyHasPrefix applies the HasPrefix predicate on the "idempotency_key" field.
func IdempotencyKeyHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldIdempotencyKey, v))
}

// IdempotencyKeyHasSuffix applies the HasSuffix predicate on the "idempotency_key" field.
func IdempotencyKeyHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldIdempotencyKey, v))
}

// IdempotencyKeyEqualFold applies the EqualFold predicate on the "idempotency_key" field.
func IdempotencyKeyEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldIdempotencyKey, v))
}

// IdempotencyKeyContainsFold applies the ContainsFold predicate on the "idempotency_key" field.
func IdempotencyKeyContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldIdempotencyKey, v))
}

// ReporterEQ applies the EQ predicate on the "reporter" field.
func ReporterEQ(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldReporter, v))
}

// ReporterNEQ applies the NEQ predicate on the "reporter" field.
func ReporterNEQ(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldReporter, v))
}

// ReporterIn applies the In predicate on the "reporter" field.
func ReporterIn(vs ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldReporter, vs...))
}

// ReporterNotIn applies the NotIn predicate on the "reporter" field.
func ReporterNotIn(vs ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldReporter, vs...))
}

// ReporterGT applies the GT predicate on the "reporter" field.
func ReporterGT(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldReporter, v))
}

// ReporterGTE applies the GTE predicate on the "reporter" field.
func ReporterGTE(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldReporter, v))
}

// ReporterLT applies the LT predicate on the "reporter" field.
func ReporterLT(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldReporter, v))
}

// ReporterLTE applies the LTE predicate on the "reporter" field.
func ReporterLTE(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldReporter, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldEQ(FieldLatitude, vc))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldNEQ(FieldLatitude, vc))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...schema.Coordinate) predicate.Incident {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Incident(sql.FieldIn(FieldLatitude, v...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...schema.Coordinate) predicate.Incident {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Incident(sql.FieldNotIn(FieldLatitude, v...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldGT(FieldLatitude, vc))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldGTE(FieldLatitude, vc))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldLT(FieldLatitude, vc))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldLTE(FieldLatitude, vc))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldEQ(FieldLongitude, vc))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldNEQ(FieldLongitude, vc))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...schema.Coordinate) predicate.Incident {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Incident(sql.FieldIn(FieldLongitude, v...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...schema.Coordinate) predicate.Incident {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Incident(sql.FieldNotIn(FieldLongitude, v...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldGT(FieldLongitude, vc))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldGTE(FieldLongitude, vc))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldLT(FieldLongitude, vc))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v schema.Coordinate) predicate.Incident {
	vc := float64(v)
	return predicate.Incident(sql.FieldLTE(FieldLongitude, vc))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldType, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldDescription, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v []byte) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v []byte) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...[]byte) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...[]byte) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v []byte) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v []byte) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v []byte) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v []byte) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldImage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Incident) predicate.Incident {
	return predicate.Incident(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Incident) predicate.Incident {
	return predicate.Incident(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Incident) predicate.Incident {
	return predicate.Incident(sql.NotPredicates(p))
}
