// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DeltaLaboratory/incident-api/internal/ent/help"
	"github.com/DeltaLaboratory/incident-api/internal/ent/predicate"
	"github.com/DeltaLaboratory/incident-api/internal/ent/schema"
	"github.com/google/uuid"
)

// HelpUpdate is the builder for updating Help entities.
type HelpUpdate struct {
	config
	hooks    []Hook
	mutation *HelpMutation
}

// Where appends a list predicates to the HelpUpdate builder.
func (hu *HelpUpdate) Where(ps ...predicate.Help) *HelpUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (hu *HelpUpdate) SetIdempotencyKey(s string) *HelpUpdate {
	hu.mutation.SetIdempotencyKey(s)
	return hu
}

// SetNillableIdempotencyKey sets the "idempotency_key" field if the given value is not nil.
func (hu *HelpUpdate) SetNillableIdempotencyKey(s *string) *HelpUpdate {
	if s != nil {
		hu.SetIdempotencyKey(*s)
	}
	return hu
}

// SetReporter sets the "reporter" field.
func (hu *HelpUpdate) SetReporter(u uuid.UUID) *HelpUpdate {
	hu.mutation.SetReporter(u)
	return hu
}

// SetNillableReporter sets the "reporter" field if the given value is not nil.
func (hu *HelpUpdate) SetNillableReporter(u *uuid.UUID) *HelpUpdate {
	if u != nil {
		hu.SetReporter(*u)
	}
	return hu
}

// SetLocation sets the "location" field.
func (hu *HelpUpdate) SetLocation(sj *schema.GeoJson) *HelpUpdate {
	hu.mutation.SetLocation(sj)
	return hu
}

// ClearLocation clears the value of the "location" field.
func (hu *HelpUpdate) ClearLocation() *HelpUpdate {
	hu.mutation.ClearLocation()
	return hu
}

// SetDescription sets the "description" field.
func (hu *HelpUpdate) SetDescription(s string) *HelpUpdate {
	hu.mutation.SetDescription(s)
	return hu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hu *HelpUpdate) SetNillableDescription(s *string) *HelpUpdate {
	if s != nil {
		hu.SetDescription(*s)
	}
	return hu
}

// SetHeartRate sets the "heart_rate" field.
func (hu *HelpUpdate) SetHeartRate(i int) *HelpUpdate {
	hu.mutation.ResetHeartRate()
	hu.mutation.SetHeartRate(i)
	return hu
}

// SetNillableHeartRate sets the "heart_rate" field if the given value is not nil.
func (hu *HelpUpdate) SetNillableHeartRate(i *int) *HelpUpdate {
	if i != nil {
		hu.SetHeartRate(*i)
	}
	return hu
}

// AddHeartRate adds i to the "heart_rate" field.
func (hu *HelpUpdate) AddHeartRate(i int) *HelpUpdate {
	hu.mutation.AddHeartRate(i)
	return hu
}

// SetBloodPressure sets the "blood_pressure" field.
func (hu *HelpUpdate) SetBloodPressure(i int) *HelpUpdate {
	hu.mutation.ResetBloodPressure()
	hu.mutation.SetBloodPressure(i)
	return hu
}

// SetNillableBloodPressure sets the "blood_pressure" field if the given value is not nil.
func (hu *HelpUpdate) SetNillableBloodPressure(i *int) *HelpUpdate {
	if i != nil {
		hu.SetBloodPressure(*i)
	}
	return hu
}

// AddBloodPressure adds i to the "blood_pressure" field.
func (hu *HelpUpdate) AddBloodPressure(i int) *HelpUpdate {
	hu.mutation.AddBloodPressure(i)
	return hu
}

// SetBodyTemperature sets the "body_temperature" field.
func (hu *HelpUpdate) SetBodyTemperature(i int) *HelpUpdate {
	hu.mutation.ResetBodyTemperature()
	hu.mutation.SetBodyTemperature(i)
	return hu
}

// SetNillableBodyTemperature sets the "body_temperature" field if the given value is not nil.
func (hu *HelpUpdate) SetNillableBodyTemperature(i *int) *HelpUpdate {
	if i != nil {
		hu.SetBodyTemperature(*i)
	}
	return hu
}

// AddBodyTemperature adds i to the "body_temperature" field.
func (hu *HelpUpdate) AddBodyTemperature(i int) *HelpUpdate {
	hu.mutation.AddBodyTemperature(i)
	return hu
}

// SetCreatedAt sets the "created_at" field.
func (hu *HelpUpdate) SetCreatedAt(t time.Time) *HelpUpdate {
	hu.mutation.SetCreatedAt(t)
	return hu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hu *HelpUpdate) SetNillableCreatedAt(t *time.Time) *HelpUpdate {
	if t != nil {
		hu.SetCreatedAt(*t)
	}
	return hu
}

// Mutation returns the HelpMutation object of the builder.
func (hu *HelpUpdate) Mutation() *HelpMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HelpUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HelpUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HelpUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HelpUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HelpUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(help.Table, help.Columns, sqlgraph.NewFieldSpec(help.FieldID, field.TypeUUID))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.IdempotencyKey(); ok {
		_spec.SetField(help.FieldIdempotencyKey, field.TypeString, value)
	}
	if value, ok := hu.mutation.Reporter(); ok {
		_spec.SetField(help.FieldReporter, field.TypeUUID, value)
	}
	if value, ok := hu.mutation.Location(); ok {
		_spec.SetField(help.FieldLocation, field.TypeOther, value)
	}
	if hu.mutation.LocationCleared() {
		_spec.ClearField(help.FieldLocation, field.TypeOther)
	}
	if value, ok := hu.mutation.Description(); ok {
		_spec.SetField(help.FieldDescription, field.TypeString, value)
	}
	if value, ok := hu.mutation.HeartRate(); ok {
		_spec.SetField(help.FieldHeartRate, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedHeartRate(); ok {
		_spec.AddField(help.FieldHeartRate, field.TypeInt, value)
	}
	if value, ok := hu.mutation.BloodPressure(); ok {
		_spec.SetField(help.FieldBloodPressure, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedBloodPressure(); ok {
		_spec.AddField(help.FieldBloodPressure, field.TypeInt, value)
	}
	if value, ok := hu.mutation.BodyTemperature(); ok {
		_spec.SetField(help.FieldBodyTemperature, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedBodyTemperature(); ok {
		_spec.AddField(help.FieldBodyTemperature, field.TypeInt, value)
	}
	if value, ok := hu.mutation.CreatedAt(); ok {
		_spec.SetField(help.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{help.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HelpUpdateOne is the builder for updating a single Help entity.
type HelpUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HelpMutation
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (huo *HelpUpdateOne) SetIdempotencyKey(s string) *HelpUpdateOne {
	huo.mutation.SetIdempotencyKey(s)
	return huo
}

// SetNillableIdempotencyKey sets the "idempotency_key" field if the given value is not nil.
func (huo *HelpUpdateOne) SetNillableIdempotencyKey(s *string) *HelpUpdateOne {
	if s != nil {
		huo.SetIdempotencyKey(*s)
	}
	return huo
}

// SetReporter sets the "reporter" field.
func (huo *HelpUpdateOne) SetReporter(u uuid.UUID) *HelpUpdateOne {
	huo.mutation.SetReporter(u)
	return huo
}

// SetNillableReporter sets the "reporter" field if the given value is not nil.
func (huo *HelpUpdateOne) SetNillableReporter(u *uuid.UUID) *HelpUpdateOne {
	if u != nil {
		huo.SetReporter(*u)
	}
	return huo
}

// SetLocation sets the "location" field.
func (huo *HelpUpdateOne) SetLocation(sj *schema.GeoJson) *HelpUpdateOne {
	huo.mutation.SetLocation(sj)
	return huo
}

// ClearLocation clears the value of the "location" field.
func (huo *HelpUpdateOne) ClearLocation() *HelpUpdateOne {
	huo.mutation.ClearLocation()
	return huo
}

// SetDescription sets the "description" field.
func (huo *HelpUpdateOne) SetDescription(s string) *HelpUpdateOne {
	huo.mutation.SetDescription(s)
	return huo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (huo *HelpUpdateOne) SetNillableDescription(s *string) *HelpUpdateOne {
	if s != nil {
		huo.SetDescription(*s)
	}
	return huo
}

// SetHeartRate sets the "heart_rate" field.
func (huo *HelpUpdateOne) SetHeartRate(i int) *HelpUpdateOne {
	huo.mutation.ResetHeartRate()
	huo.mutation.SetHeartRate(i)
	return huo
}

// SetNillableHeartRate sets the "heart_rate" field if the given value is not nil.
func (huo *HelpUpdateOne) SetNillableHeartRate(i *int) *HelpUpdateOne {
	if i != nil {
		huo.SetHeartRate(*i)
	}
	return huo
}

// AddHeartRate adds i to the "heart_rate" field.
func (huo *HelpUpdateOne) AddHeartRate(i int) *HelpUpdateOne {
	huo.mutation.AddHeartRate(i)
	return huo
}

// SetBloodPressure sets the "blood_pressure" field.
func (huo *HelpUpdateOne) SetBloodPressure(i int) *HelpUpdateOne {
	huo.mutation.ResetBloodPressure()
	huo.mutation.SetBloodPressure(i)
	return huo
}

// SetNillableBloodPressure sets the "blood_pressure" field if the given value is not nil.
func (huo *HelpUpdateOne) SetNillableBloodPressure(i *int) *HelpUpdateOne {
	if i != nil {
		huo.SetBloodPressure(*i)
	}
	return huo
}

// AddBloodPressure adds i to the "blood_pressure" field.
func (huo *HelpUpdateOne) AddBloodPressure(i int) *HelpUpdateOne {
	huo.mutation.AddBloodPressure(i)
	return huo
}

// SetBodyTemperature sets the "body_temperature" field.
func (huo *HelpUpdateOne) SetBodyTemperature(i int) *HelpUpdateOne {
	huo.mutation.ResetBodyTemperature()
	huo.mutation.SetBodyTemperature(i)
	return huo
}

// SetNillableBodyTemperature sets the "body_temperature" field if the given value is not nil.
func (huo *HelpUpdateOne) SetNillableBodyTemperature(i *int) *HelpUpdateOne {
	if i != nil {
		huo.SetBodyTemperature(*i)
	}
	return huo
}

// AddBodyTemperature adds i to the "body_temperature" field.
func (huo *HelpUpdateOne) AddBodyTemperature(i int) *HelpUpdateOne {
	huo.mutation.AddBodyTemperature(i)
	return huo
}

// SetCreatedAt sets the "created_at" field.
func (huo *HelpUpdateOne) SetCreatedAt(t time.Time) *HelpUpdateOne {
	huo.mutation.SetCreatedAt(t)
	return huo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (huo *HelpUpdateOne) SetNillableCreatedAt(t *time.Time) *HelpUpdateOne {
	if t != nil {
		huo.SetCreatedAt(*t)
	}
	return huo
}

// Mutation returns the HelpMutation object of the builder.
func (huo *HelpUpdateOne) Mutation() *HelpMutation {
	return huo.mutation
}

// Where appends a list predicates to the HelpUpdate builder.
func (huo *HelpUpdateOne) Where(ps ...predicate.Help) *HelpUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HelpUpdateOne) Select(field string, fields ...string) *HelpUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Help entity.
func (huo *HelpUpdateOne) Save(ctx context.Context) (*Help, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HelpUpdateOne) SaveX(ctx context.Context) *Help {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HelpUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HelpUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HelpUpdateOne) sqlSave(ctx context.Context) (_node *Help, err error) {
	_spec := sqlgraph.NewUpdateSpec(help.Table, help.Columns, sqlgraph.NewFieldSpec(help.FieldID, field.TypeUUID))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Help.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, help.FieldID)
		for _, f := range fields {
			if !help.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != help.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.IdempotencyKey(); ok {
		_spec.SetField(help.FieldIdempotencyKey, field.TypeString, value)
	}
	if value, ok := huo.mutation.Reporter(); ok {
		_spec.SetField(help.FieldReporter, field.TypeUUID, value)
	}
	if value, ok := huo.mutation.Location(); ok {
		_spec.SetField(help.FieldLocation, field.TypeOther, value)
	}
	if huo.mutation.LocationCleared() {
		_spec.ClearField(help.FieldLocation, field.TypeOther)
	}
	if value, ok := huo.mutation.Description(); ok {
		_spec.SetField(help.FieldDescription, field.TypeString, value)
	}
	if value, ok := huo.mutation.HeartRate(); ok {
		_spec.SetField(help.FieldHeartRate, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedHeartRate(); ok {
		_spec.AddField(help.FieldHeartRate, field.TypeInt, value)
	}
	if value, ok := huo.mutation.BloodPressure(); ok {
		_spec.SetField(help.FieldBloodPressure, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedBloodPressure(); ok {
		_spec.AddField(help.FieldBloodPressure, field.TypeInt, value)
	}
	if value, ok := huo.mutation.BodyTemperature(); ok {
		_spec.SetField(help.FieldBodyTemperature, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedBodyTemperature(); ok {
		_spec.AddField(help.FieldBodyTemperature, field.TypeInt, value)
	}
	if value, ok := huo.mutation.CreatedAt(); ok {
		_spec.SetField(help.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Help{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{help.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
