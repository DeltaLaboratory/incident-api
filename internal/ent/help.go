// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DeltaLaboratory/incident-api/internal/ent/help"
	"github.com/DeltaLaboratory/incident-api/internal/ent/schema"
	"github.com/google/uuid"
)

// Help is the model entity for the Help schema.
type Help struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IdempotencyKey holds the value of the "idempotency_key" field.
	IdempotencyKey string `json:"idempotency_key,omitempty"`
	// Reporter holds the value of the "reporter" field.
	Reporter uuid.UUID `json:"reporter,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude schema.Coordinate `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude schema.Coordinate `json:"longitude,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// HeartRate holds the value of the "heart_rate" field.
	HeartRate *int `json:"heart_rate,omitempty"`
	// BloodPressure holds the value of the "blood_pressure" field.
	BloodPressure *int `json:"blood_pressure,omitempty"`
	// BodyTemperature holds the value of the "body_temperature" field.
	BodyTemperature *int `json:"body_temperature,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Help) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case help.FieldLatitude, help.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case help.FieldHeartRate, help.FieldBloodPressure, help.FieldBodyTemperature:
			values[i] = new(sql.NullInt64)
		case help.FieldIdempotencyKey, help.FieldDescription:
			values[i] = new(sql.NullString)
		case help.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case help.FieldID, help.FieldReporter:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Help fields.
func (h *Help) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case help.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				h.ID = *value
			}
		case help.FieldIdempotencyKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idempotency_key", values[i])
			} else if value.Valid {
				h.IdempotencyKey = value.String
			}
		case help.FieldReporter:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field reporter", values[i])
			} else if value != nil {
				h.Reporter = *value
			}
		case help.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				h.Latitude = schema.Coordinate(value.Float64)
			}
		case help.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				h.Longitude = schema.Coordinate(value.Float64)
			}
		case help.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				h.Description = value.String
			}
		case help.FieldHeartRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field heart_rate", values[i])
			} else if value.Valid {
				h.HeartRate = new(int)
				*h.HeartRate = int(value.Int64)
			}
		case help.FieldBloodPressure:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field blood_pressure", values[i])
			} else if value.Valid {
				h.BloodPressure = new(int)
				*h.BloodPressure = int(value.Int64)
			}
		case help.FieldBodyTemperature:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field body_temperature", values[i])
			} else if value.Valid {
				h.BodyTemperature = new(int)
				*h.BodyTemperature = int(value.Int64)
			}
		case help.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Help.
// This includes values selected through modifiers, order, etc.
func (h *Help) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// Update returns a builder for updating this Help.
// Note that you need to call Help.Unwrap() before calling this method if this Help
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Help) Update() *HelpUpdateOne {
	return NewHelpClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Help entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Help) Unwrap() *Help {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Help is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Help) String() string {
	var builder strings.Builder
	builder.WriteString("Help(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("idempotency_key=")
	builder.WriteString(h.IdempotencyKey)
	builder.WriteString(", ")
	builder.WriteString("reporter=")
	builder.WriteString(fmt.Sprintf("%v", h.Reporter))
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", h.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", h.Longitude))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(h.Description)
	builder.WriteString(", ")
	if v := h.HeartRate; v != nil {
		builder.WriteString("heart_rate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := h.BloodPressure; v != nil {
		builder.WriteString("blood_pressure=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := h.BodyTemperature; v != nil {
		builder.WriteString("body_temperature=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Helps is a parsable slice of Help.
type Helps []*Help
