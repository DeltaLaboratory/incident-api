// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DeltaLaboratory/incident-api/internal/ent/incident"
	"github.com/DeltaLaboratory/incident-api/internal/ent/schema"
	"github.com/google/uuid"
)

// Incident is the model entity for the Incident schema.
type Incident struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IdempotencyKey holds the value of the "idempotency_key" field.
	IdempotencyKey string `json:"idempotency_key,omitempty"`
	// Reporter holds the value of the "reporter" field.
	Reporter uuid.UUID `json:"reporter,omitempty"`
	// Location holds the value of the "location" field.
	Location *schema.GeoJson `json:"location,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Image holds the value of the "image" field.
	Image *[]byte `json:"image,omitempty"`
	// Vote holds the value of the "vote" field.
	Vote int `json:"vote,omitempty"`
	// VoteFilter holds the value of the "vote_filter" field.
	VoteFilter *[]byte `json:"vote_filter,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Incident) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incident.FieldImage, incident.FieldVoteFilter:
			values[i] = new([]byte)
		case incident.FieldLocation:
			values[i] = new(schema.GeoJson)
		case incident.FieldVote:
			values[i] = new(sql.NullInt64)
		case incident.FieldIdempotencyKey, incident.FieldType, incident.FieldDescription:
			values[i] = new(sql.NullString)
		case incident.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case incident.FieldID, incident.FieldReporter:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Incident fields.
func (i *Incident) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case incident.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case incident.FieldIdempotencyKey:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idempotency_key", values[j])
			} else if value.Valid {
				i.IdempotencyKey = value.String
			}
		case incident.FieldReporter:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field reporter", values[j])
			} else if value != nil {
				i.Reporter = *value
			}
		case incident.FieldLocation:
			if value, ok := values[j].(*schema.GeoJson); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[j])
			} else if value != nil {
				i.Location = value
			}
		case incident.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = value.String
			}
		case incident.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case incident.FieldImage:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[j])
			} else if value != nil {
				i.Image = value
			}
		case incident.FieldVote:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vote", values[j])
			} else if value.Valid {
				i.Vote = int(value.Int64)
			}
		case incident.FieldVoteFilter:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vote_filter", values[j])
			} else if value != nil {
				i.VoteFilter = value
			}
		case incident.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Incident.
// This includes values selected through modifiers, order, etc.
func (i *Incident) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Incident.
// Note that you need to call Incident.Unwrap() before calling this method if this Incident
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Incident) Update() *IncidentUpdateOne {
	return NewIncidentClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Incident entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Incident) Unwrap() *Incident {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Incident is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Incident) String() string {
	var builder strings.Builder
	builder.WriteString("Incident(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("idempotency_key=")
	builder.WriteString(i.IdempotencyKey)
	builder.WriteString(", ")
	builder.WriteString("reporter=")
	builder.WriteString(fmt.Sprintf("%v", i.Reporter))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(fmt.Sprintf("%v", i.Location))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(i.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	if v := i.Image; v != nil {
		builder.WriteString("image=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("vote=")
	builder.WriteString(fmt.Sprintf("%v", i.Vote))
	builder.WriteString(", ")
	if v := i.VoteFilter; v != nil {
		builder.WriteString("vote_filter=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Incidents is a parsable slice of Incident.
type Incidents []*Incident
