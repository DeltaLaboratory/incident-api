// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DeltaLaboratory/incident-api/internal/ent/help"
	"github.com/DeltaLaboratory/incident-api/internal/ent/schema"
	"github.com/google/uuid"
)

// HelpCreate is the builder for creating a Help entity.
type HelpCreate struct {
	config
	mutation *HelpMutation
	hooks    []Hook
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (hc *HelpCreate) SetIdempotencyKey(s string) *HelpCreate {
	hc.mutation.SetIdempotencyKey(s)
	return hc
}

// SetReporter sets the "reporter" field.
func (hc *HelpCreate) SetReporter(u uuid.UUID) *HelpCreate {
	hc.mutation.SetReporter(u)
	return hc
}

// SetLatitude sets the "latitude" field.
func (hc *HelpCreate) SetLatitude(s schema.Coordinate) *HelpCreate {
	hc.mutation.SetLatitude(s)
	return hc
}

// SetLongitude sets the "longitude" field.
func (hc *HelpCreate) SetLongitude(s schema.Coordinate) *HelpCreate {
	hc.mutation.SetLongitude(s)
	return hc
}

// SetDescription sets the "description" field.
func (hc *HelpCreate) SetDescription(s string) *HelpCreate {
	hc.mutation.SetDescription(s)
	return hc
}

// SetHeartRate sets the "heart_rate" field.
func (hc *HelpCreate) SetHeartRate(i int) *HelpCreate {
	hc.mutation.SetHeartRate(i)
	return hc
}

// SetBloodPressure sets the "blood_pressure" field.
func (hc *HelpCreate) SetBloodPressure(i int) *HelpCreate {
	hc.mutation.SetBloodPressure(i)
	return hc
}

// SetBodyTemperature sets the "body_temperature" field.
func (hc *HelpCreate) SetBodyTemperature(i int) *HelpCreate {
	hc.mutation.SetBodyTemperature(i)
	return hc
}

// SetCreatedAt sets the "created_at" field.
func (hc *HelpCreate) SetCreatedAt(t time.Time) *HelpCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HelpCreate) SetNillableCreatedAt(t *time.Time) *HelpCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// SetID sets the "id" field.
func (hc *HelpCreate) SetID(u uuid.UUID) *HelpCreate {
	hc.mutation.SetID(u)
	return hc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hc *HelpCreate) SetNillableID(u *uuid.UUID) *HelpCreate {
	if u != nil {
		hc.SetID(*u)
	}
	return hc
}

// Mutation returns the HelpMutation object of the builder.
func (hc *HelpCreate) Mutation() *HelpMutation {
	return hc.mutation
}

// Save creates the Help in the database.
func (hc *HelpCreate) Save(ctx context.Context) (*Help, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HelpCreate) SaveX(ctx context.Context) *Help {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HelpCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HelpCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HelpCreate) defaults() {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		v := help.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
	if _, ok := hc.mutation.ID(); !ok {
		v := help.DefaultID()
		hc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HelpCreate) check() error {
	if _, ok := hc.mutation.IdempotencyKey(); !ok {
		return &ValidationError{Name: "idempotency_key", err: errors.New(`ent: missing required field "Help.idempotency_key"`)}
	}
	if _, ok := hc.mutation.Reporter(); !ok {
		return &ValidationError{Name: "reporter", err: errors.New(`ent: missing required field "Help.reporter"`)}
	}
	if _, ok := hc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Help.latitude"`)}
	}
	if _, ok := hc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Help.longitude"`)}
	}
	if _, ok := hc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Help.description"`)}
	}
	if _, ok := hc.mutation.HeartRate(); !ok {
		return &ValidationError{Name: "heart_rate", err: errors.New(`ent: missing required field "Help.heart_rate"`)}
	}
	if _, ok := hc.mutation.BloodPressure(); !ok {
		return &ValidationError{Name: "blood_pressure", err: errors.New(`ent: missing required field "Help.blood_pressure"`)}
	}
	if _, ok := hc.mutation.BodyTemperature(); !ok {
		return &ValidationError{Name: "body_temperature", err: errors.New(`ent: missing required field "Help.body_temperature"`)}
	}
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Help.created_at"`)}
	}
	return nil
}

func (hc *HelpCreate) sqlSave(ctx context.Context) (*Help, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HelpCreate) createSpec() (*Help, *sqlgraph.CreateSpec) {
	var (
		_node = &Help{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(help.Table, sqlgraph.NewFieldSpec(help.FieldID, field.TypeUUID))
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := hc.mutation.IdempotencyKey(); ok {
		_spec.SetField(help.FieldIdempotencyKey, field.TypeString, value)
		_node.IdempotencyKey = value
	}
	if value, ok := hc.mutation.Reporter(); ok {
		_spec.SetField(help.FieldReporter, field.TypeUUID, value)
		_node.Reporter = value
	}
	if value, ok := hc.mutation.Latitude(); ok {
		_spec.SetField(help.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := hc.mutation.Longitude(); ok {
		_spec.SetField(help.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := hc.mutation.Description(); ok {
		_spec.SetField(help.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hc.mutation.HeartRate(); ok {
		_spec.SetField(help.FieldHeartRate, field.TypeInt, value)
		_node.HeartRate = &value
	}
	if value, ok := hc.mutation.BloodPressure(); ok {
		_spec.SetField(help.FieldBloodPressure, field.TypeInt, value)
		_node.BloodPressure = &value
	}
	if value, ok := hc.mutation.BodyTemperature(); ok {
		_spec.SetField(help.FieldBodyTemperature, field.TypeInt, value)
		_node.BodyTemperature = &value
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(help.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// HelpCreateBulk is the builder for creating many Help entities in bulk.
type HelpCreateBulk struct {
	config
	err      error
	builders []*HelpCreate
}

// Save creates the Help entities in the database.
func (hcb *HelpCreateBulk) Save(ctx context.Context) ([]*Help, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Help, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HelpMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HelpCreateBulk) SaveX(ctx context.Context) []*Help {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HelpCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HelpCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
