// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DeltaLaboratory/incident-api/internal/ent/help"
	"github.com/DeltaLaboratory/incident-api/internal/ent/incident"
	"github.com/DeltaLaboratory/incident-api/internal/ent/predicate"
	"github.com/DeltaLaboratory/incident-api/internal/ent/schema"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHelp     = "Help"
	TypeIncident = "Incident"
)

// HelpMutation represents an operation that mutates the Help nodes in the graph.
type HelpMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	idempotency_key     *string
	reporter            *uuid.UUID
	location            **schema.GeoJson
	description         *string
	heart_rate          *int
	addheart_rate       *int
	blood_pressure      *int
	addblood_pressure   *int
	body_temperature    *int
	addbody_temperature *int
	created_at          *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Help, error)
	predicates          []predicate.Help
}

var _ ent.Mutation = (*HelpMutation)(nil)

// helpOption allows management of the mutation configuration using functional options.
type helpOption func(*HelpMutation)

// newHelpMutation creates new mutation for the Help entity.
func newHelpMutation(c config, op Op, opts ...helpOption) *HelpMutation {
	m := &HelpMutation{
		config:        c,
		op:            op,
		typ:           TypeHelp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHelpID sets the ID field of the mutation.
func withHelpID(id uuid.UUID) helpOption {
	return func(m *HelpMutation) {
		var (
			err   error
			once  sync.Once
			value *Help
		)
		m.oldValue = func(ctx context.Context) (*Help, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Help.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHelp sets the old Help of the mutation.
func withHelp(node *Help) helpOption {
	return func(m *HelpMutation) {
		m.oldValue = func(context.Context) (*Help, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HelpMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HelpMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Help entities.
func (m *HelpMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HelpMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HelpMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Help.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (m *HelpMutation) SetIdempotencyKey(s string) {
	m.idempotency_key = &s
}

// IdempotencyKey returns the value of the "idempotency_key" field in the mutation.
func (m *HelpMutation) IdempotencyKey() (r string, exists bool) {
	v := m.idempotency_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIdempotencyKey returns the old "idempotency_key" field's value of the Help entity.
// If the Help object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HelpMutation) OldIdempotencyKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdempotencyKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdempotencyKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdempotencyKey: %w", err)
	}
	return oldValue.IdempotencyKey, nil
}

// ResetIdempotencyKey resets all changes to the "idempotency_key" field.
func (m *HelpMutation) ResetIdempotencyKey() {
	m.idempotency_key = nil
}

// SetReporter sets the "reporter" field.
func (m *HelpMutation) SetReporter(u uuid.UUID) {
	m.reporter = &u
}

// Reporter returns the value of the "reporter" field in the mutation.
func (m *HelpMutation) Reporter() (r uuid.UUID, exists bool) {
	v := m.reporter
	if v == nil {
		return
	}
	return *v, true
}

// OldReporter returns the old "reporter" field's value of the Help entity.
// If the Help object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HelpMutation) OldReporter(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReporter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReporter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReporter: %w", err)
	}
	return oldValue.Reporter, nil
}

// ResetReporter resets all changes to the "reporter" field.
func (m *HelpMutation) ResetReporter() {
	m.reporter = nil
}

// SetLocation sets the "location" field.
func (m *HelpMutation) SetLocation(sj *schema.GeoJson) {
	m.location = &sj
}

// Location returns the value of the "location" field in the mutation.
func (m *HelpMutation) Location() (r *schema.GeoJson, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Help entity.
// If the Help object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HelpMutation) OldLocation(ctx context.Context) (v *schema.GeoJson, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *HelpMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[help.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *HelpMutation) LocationCleared() bool {
	_, ok := m.clearedFields[help.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *HelpMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, help.FieldLocation)
}

// SetDescription sets the "description" field.
func (m *HelpMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *HelpMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Help entity.
// If the Help object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HelpMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *HelpMutation) ResetDescription() {
	m.description = nil
}

// SetHeartRate sets the "heart_rate" field.
func (m *HelpMutation) SetHeartRate(i int) {
	m.heart_rate = &i
	m.addheart_rate = nil
}

// HeartRate returns the value of the "heart_rate" field in the mutation.
func (m *HelpMutation) HeartRate() (r int, exists bool) {
	v := m.heart_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldHeartRate returns the old "heart_rate" field's value of the Help entity.
// If the Help object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HelpMutation) OldHeartRate(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeartRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeartRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeartRate: %w", err)
	}
	return oldValue.HeartRate, nil
}

// AddHeartRate adds i to the "heart_rate" field.
func (m *HelpMutation) AddHeartRate(i int) {
	if m.addheart_rate != nil {
		*m.addheart_rate += i
	} else {
		m.addheart_rate = &i
	}
}

// AddedHeartRate returns the value that was added to the "heart_rate" field in this mutation.
func (m *HelpMutation) AddedHeartRate() (r int, exists bool) {
	v := m.addheart_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeartRate resets all changes to the "heart_rate" field.
func (m *HelpMutation) ResetHeartRate() {
	m.heart_rate = nil
	m.addheart_rate = nil
}

// SetBloodPressure sets the "blood_pressure" field.
func (m *HelpMutation) SetBloodPressure(i int) {
	m.blood_pressure = &i
	m.addblood_pressure = nil
}

// BloodPressure returns the value of the "blood_pressure" field in the mutation.
func (m *HelpMutation) BloodPressure() (r int, exists bool) {
	v := m.blood_pressure
	if v == nil {
		return
	}
	return *v, true
}

// OldBloodPressure returns the old "blood_pressure" field's value of the Help entity.
// If the Help object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HelpMutation) OldBloodPressure(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBloodPressure is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBloodPressure requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBloodPressure: %w", err)
	}
	return oldValue.BloodPressure, nil
}

// AddBloodPressure adds i to the "blood_pressure" field.
func (m *HelpMutation) AddBloodPressure(i int) {
	if m.addblood_pressure != nil {
		*m.addblood_pressure += i
	} else {
		m.addblood_pressure = &i
	}
}

// AddedBloodPressure returns the value that was added to the "blood_pressure" field in this mutation.
func (m *HelpMutation) AddedBloodPressure() (r int, exists bool) {
	v := m.addblood_pressure
	if v == nil {
		return
	}
	return *v, true
}

// ResetBloodPressure resets all changes to the "blood_pressure" field.
func (m *HelpMutation) ResetBloodPressure() {
	m.blood_pressure = nil
	m.addblood_pressure = nil
}

// SetBodyTemperature sets the "body_temperature" field.
func (m *HelpMutation) SetBodyTemperature(i int) {
	m.body_temperature = &i
	m.addbody_temperature = nil
}

// BodyTemperature returns the value of the "body_temperature" field in the mutation.
func (m *HelpMutation) BodyTemperature() (r int, exists bool) {
	v := m.body_temperature
	if v == nil {
		return
	}
	return *v, true
}

// OldBodyTemperature returns the old "body_temperature" field's value of the Help entity.
// If the Help object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HelpMutation) OldBodyTemperature(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBodyTemperature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBodyTemperature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBodyTemperature: %w", err)
	}
	return oldValue.BodyTemperature, nil
}

// AddBodyTemperature adds i to the "body_temperature" field.
func (m *HelpMutation) AddBodyTemperature(i int) {
	if m.addbody_temperature != nil {
		*m.addbody_temperature += i
	} else {
		m.addbody_temperature = &i
	}
}

// AddedBodyTemperature returns the value that was added to the "body_temperature" field in this mutation.
func (m *HelpMutation) AddedBodyTemperature() (r int, exists bool) {
	v := m.addbody_temperature
	if v == nil {
		return
	}
	return *v, true
}

// ResetBodyTemperature resets all changes to the "body_temperature" field.
func (m *HelpMutation) ResetBodyTemperature() {
	m.body_temperature = nil
	m.addbody_temperature = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *HelpMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HelpMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Help entity.
// If the Help object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HelpMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HelpMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the HelpMutation builder.
func (m *HelpMutation) Where(ps ...predicate.Help) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HelpMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HelpMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Help, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HelpMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HelpMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Help).
func (m *HelpMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HelpMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.idempotency_key != nil {
		fields = append(fields, help.FieldIdempotencyKey)
	}
	if m.reporter != nil {
		fields = append(fields, help.FieldReporter)
	}
	if m.location != nil {
		fields = append(fields, help.FieldLocation)
	}
	if m.description != nil {
		fields = append(fields, help.FieldDescription)
	}
	if m.heart_rate != nil {
		fields = append(fields, help.FieldHeartRate)
	}
	if m.blood_pressure != nil {
		fields = append(fields, help.FieldBloodPressure)
	}
	if m.body_temperature != nil {
		fields = append(fields, help.FieldBodyTemperature)
	}
	if m.created_at != nil {
		fields = append(fields, help.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HelpMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case help.FieldIdempotencyKey:
		return m.IdempotencyKey()
	case help.FieldReporter:
		return m.Reporter()
	case help.FieldLocation:
		return m.Location()
	case help.FieldDescription:
		return m.Description()
	case help.FieldHeartRate:
		return m.HeartRate()
	case help.FieldBloodPressure:
		return m.BloodPressure()
	case help.FieldBodyTemperature:
		return m.BodyTemperature()
	case help.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HelpMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case help.FieldIdempotencyKey:
		return m.OldIdempotencyKey(ctx)
	case help.FieldReporter:
		return m.OldReporter(ctx)
	case help.FieldLocation:
		return m.OldLocation(ctx)
	case help.FieldDescription:
		return m.OldDescription(ctx)
	case help.FieldHeartRate:
		return m.OldHeartRate(ctx)
	case help.FieldBloodPressure:
		return m.OldBloodPressure(ctx)
	case help.FieldBodyTemperature:
		return m.OldBodyTemperature(ctx)
	case help.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Help field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HelpMutation) SetField(name string, value ent.Value) error {
	switch name {
	case help.FieldIdempotencyKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdempotencyKey(v)
		return nil
	case help.FieldReporter:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReporter(v)
		return nil
	case help.FieldLocation:
		v, ok := value.(*schema.GeoJson)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case help.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case help.FieldHeartRate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeartRate(v)
		return nil
	case help.FieldBloodPressure:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBloodPressure(v)
		return nil
	case help.FieldBodyTemperature:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBodyTemperature(v)
		return nil
	case help.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Help field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HelpMutation) AddedFields() []string {
	var fields []string
	if m.addheart_rate != nil {
		fields = append(fields, help.FieldHeartRate)
	}
	if m.addblood_pressure != nil {
		fields = append(fields, help.FieldBloodPressure)
	}
	if m.addbody_temperature != nil {
		fields = append(fields, help.FieldBodyTemperature)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HelpMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case help.FieldHeartRate:
		return m.AddedHeartRate()
	case help.FieldBloodPressure:
		return m.AddedBloodPressure()
	case help.FieldBodyTemperature:
		return m.AddedBodyTemperature()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HelpMutation) AddField(name string, value ent.Value) error {
	switch name {
	case help.FieldHeartRate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeartRate(v)
		return nil
	case help.FieldBloodPressure:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBloodPressure(v)
		return nil
	case help.FieldBodyTemperature:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBodyTemperature(v)
		return nil
	}
	return fmt.Errorf("unknown Help numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HelpMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(help.FieldLocation) {
		fields = append(fields, help.FieldLocation)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HelpMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HelpMutation) ClearField(name string) error {
	switch name {
	case help.FieldLocation:
		m.ClearLocation()
		return nil
	}
	return fmt.Errorf("unknown Help nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HelpMutation) ResetField(name string) error {
	switch name {
	case help.FieldIdempotencyKey:
		m.ResetIdempotencyKey()
		return nil
	case help.FieldReporter:
		m.ResetReporter()
		return nil
	case help.FieldLocation:
		m.ResetLocation()
		return nil
	case help.FieldDescription:
		m.ResetDescription()
		return nil
	case help.FieldHeartRate:
		m.ResetHeartRate()
		return nil
	case help.FieldBloodPressure:
		m.ResetBloodPressure()
		return nil
	case help.FieldBodyTemperature:
		m.ResetBodyTemperature()
		return nil
	case help.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Help field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HelpMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HelpMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HelpMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HelpMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HelpMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HelpMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HelpMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Help unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HelpMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Help edge %s", name)
}

// IncidentMutation represents an operation that mutates the Incident nodes in the graph.
type IncidentMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	idempotency_key *string
	reporter        *uuid.UUID
	location        **schema.GeoJson
	_type           *string
	description     *string
	image           *[]byte
	created_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Incident, error)
	predicates      []predicate.Incident
}

var _ ent.Mutation = (*IncidentMutation)(nil)

// incidentOption allows management of the mutation configuration using functional options.
type incidentOption func(*IncidentMutation)

// newIncidentMutation creates new mutation for the Incident entity.
func newIncidentMutation(c config, op Op, opts ...incidentOption) *IncidentMutation {
	m := &IncidentMutation{
		config:        c,
		op:            op,
		typ:           TypeIncident,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIncidentID sets the ID field of the mutation.
func withIncidentID(id uuid.UUID) incidentOption {
	return func(m *IncidentMutation) {
		var (
			err   error
			once  sync.Once
			value *Incident
		)
		m.oldValue = func(ctx context.Context) (*Incident, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Incident.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIncident sets the old Incident of the mutation.
func withIncident(node *Incident) incidentOption {
	return func(m *IncidentMutation) {
		m.oldValue = func(context.Context) (*Incident, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IncidentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IncidentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Incident entities.
func (m *IncidentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IncidentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IncidentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Incident.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (m *IncidentMutation) SetIdempotencyKey(s string) {
	m.idempotency_key = &s
}

// IdempotencyKey returns the value of the "idempotency_key" field in the mutation.
func (m *IncidentMutation) IdempotencyKey() (r string, exists bool) {
	v := m.idempotency_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIdempotencyKey returns the old "idempotency_key" field's value of the Incident entity.
// If the Incident object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IncidentMutation) OldIdempotencyKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdempotencyKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdempotencyKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdempotencyKey: %w", err)
	}
	return oldValue.IdempotencyKey, nil
}

// ResetIdempotencyKey resets all changes to the "idempotency_key" field.
func (m *IncidentMutation) ResetIdempotencyKey() {
	m.idempotency_key = nil
}

// SetReporter sets the "reporter" field.
func (m *IncidentMutation) SetReporter(u uuid.UUID) {
	m.reporter = &u
}

// Reporter returns the value of the "reporter" field in the mutation.
func (m *IncidentMutation) Reporter() (r uuid.UUID, exists bool) {
	v := m.reporter
	if v == nil {
		return
	}
	return *v, true
}

// OldReporter returns the old "reporter" field's value of the Incident entity.
// If the Incident object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IncidentMutation) OldReporter(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReporter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReporter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReporter: %w", err)
	}
	return oldValue.Reporter, nil
}

// ResetReporter resets all changes to the "reporter" field.
func (m *IncidentMutation) ResetReporter() {
	m.reporter = nil
}

// SetLocation sets the "location" field.
func (m *IncidentMutation) SetLocation(sj *schema.GeoJson) {
	m.location = &sj
}

// Location returns the value of the "location" field in the mutation.
func (m *IncidentMutation) Location() (r *schema.GeoJson, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Incident entity.
// If the Incident object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IncidentMutation) OldLocation(ctx context.Context) (v *schema.GeoJson, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *IncidentMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[incident.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *IncidentMutation) LocationCleared() bool {
	_, ok := m.clearedFields[incident.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *IncidentMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, incident.FieldLocation)
}

// SetType sets the "type" field.
func (m *IncidentMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *IncidentMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Incident entity.
// If the Incident object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IncidentMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *IncidentMutation) ResetType() {
	m._type = nil
}

// SetDescription sets the "description" field.
func (m *IncidentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *IncidentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Incident entity.
// If the Incident object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IncidentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *IncidentMutation) ResetDescription() {
	m.description = nil
}

// SetImage sets the "image" field.
func (m *IncidentMutation) SetImage(b []byte) {
	m.image = &b
}

// Image returns the value of the "image" field in the mutation.
func (m *IncidentMutation) Image() (r []byte, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Incident entity.
// If the Incident object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IncidentMutation) OldImage(ctx context.Context) (v *[]byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *IncidentMutation) ResetImage() {
	m.image = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *IncidentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IncidentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Incident entity.
// If the Incident object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IncidentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IncidentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the IncidentMutation builder.
func (m *IncidentMutation) Where(ps ...predicate.Incident) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IncidentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IncidentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Incident, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IncidentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IncidentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Incident).
func (m *IncidentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IncidentMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.idempotency_key != nil {
		fields = append(fields, incident.FieldIdempotencyKey)
	}
	if m.reporter != nil {
		fields = append(fields, incident.FieldReporter)
	}
	if m.location != nil {
		fields = append(fields, incident.FieldLocation)
	}
	if m._type != nil {
		fields = append(fields, incident.FieldType)
	}
	if m.description != nil {
		fields = append(fields, incident.FieldDescription)
	}
	if m.image != nil {
		fields = append(fields, incident.FieldImage)
	}
	if m.created_at != nil {
		fields = append(fields, incident.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IncidentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case incident.FieldIdempotencyKey:
		return m.IdempotencyKey()
	case incident.FieldReporter:
		return m.Reporter()
	case incident.FieldLocation:
		return m.Location()
	case incident.FieldType:
		return m.GetType()
	case incident.FieldDescription:
		return m.Description()
	case incident.FieldImage:
		return m.Image()
	case incident.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IncidentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case incident.FieldIdempotencyKey:
		return m.OldIdempotencyKey(ctx)
	case incident.FieldReporter:
		return m.OldReporter(ctx)
	case incident.FieldLocation:
		return m.OldLocation(ctx)
	case incident.FieldType:
		return m.OldType(ctx)
	case incident.FieldDescription:
		return m.OldDescription(ctx)
	case incident.FieldImage:
		return m.OldImage(ctx)
	case incident.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Incident field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IncidentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case incident.FieldIdempotencyKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdempotencyKey(v)
		return nil
	case incident.FieldReporter:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReporter(v)
		return nil
	case incident.FieldLocation:
		v, ok := value.(*schema.GeoJson)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case incident.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case incident.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case incident.FieldImage:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case incident.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Incident field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IncidentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IncidentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IncidentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Incident numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IncidentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(incident.FieldLocation) {
		fields = append(fields, incident.FieldLocation)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IncidentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IncidentMutation) ClearField(name string) error {
	switch name {
	case incident.FieldLocation:
		m.ClearLocation()
		return nil
	}
	return fmt.Errorf("unknown Incident nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IncidentMutation) ResetField(name string) error {
	switch name {
	case incident.FieldIdempotencyKey:
		m.ResetIdempotencyKey()
		return nil
	case incident.FieldReporter:
		m.ResetReporter()
		return nil
	case incident.FieldLocation:
		m.ResetLocation()
		return nil
	case incident.FieldType:
		m.ResetType()
		return nil
	case incident.FieldDescription:
		m.ResetDescription()
		return nil
	case incident.FieldImage:
		m.ResetImage()
		return nil
	case incident.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Incident field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IncidentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IncidentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IncidentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IncidentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IncidentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IncidentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IncidentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Incident unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IncidentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Incident edge %s", name)
}
